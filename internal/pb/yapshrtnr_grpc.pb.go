// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.2
// source: proto/yapshrtnr.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shortener_PingDB_FullMethodName            = "/yapshrtnr.Shortener/PingDB"
	Shortener_GetURL_FullMethodName            = "/yapshrtnr.Shortener/GetURL"
	Shortener_PostURL_FullMethodName           = "/yapshrtnr.Shortener/PostURL"
	Shortener_GetInternalStats_FullMethodName  = "/yapshrtnr.Shortener/GetInternalStats"
	Shortener_PostBatchURLs_FullMethodName     = "/yapshrtnr.Shortener/PostBatchURLs"
	Shortener_DeleteBatchByUser_FullMethodName = "/yapshrtnr.Shortener/DeleteBatchByUser"
	Shortener_GetURLsByUser_FullMethodName     = "/yapshrtnr.Shortener/GetURLsByUser"
)

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	PingDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetURL(ctx context.Context, in *Short, opts ...grpc.CallOption) (*GetResponse, error)
	PostURL(ctx context.Context, in *Long, opts ...grpc.CallOption) (*Short, error)
	GetInternalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error)
	PostBatchURLs(ctx context.Context, in *RequestBatchURLs, opts ...grpc.CallOption) (*ResponseBatchURLs, error)
	DeleteBatchByUser(ctx context.Context, in *RequestDeleteBatch, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetURLsByUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGetURLsByUser, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) PingDB(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shortener_PingDB_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetURL(ctx context.Context, in *Short, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, Shortener_GetURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostURL(ctx context.Context, in *Long, opts ...grpc.CallOption) (*Short, error) {
	out := new(Short)
	err := c.cc.Invoke(ctx, Shortener_PostURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetInternalStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, Shortener_GetInternalStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) PostBatchURLs(ctx context.Context, in *RequestBatchURLs, opts ...grpc.CallOption) (*ResponseBatchURLs, error) {
	out := new(ResponseBatchURLs)
	err := c.cc.Invoke(ctx, Shortener_PostBatchURLs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteBatchByUser(ctx context.Context, in *RequestDeleteBatch, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Shortener_DeleteBatchByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetURLsByUser(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGetURLsByUser, error) {
	out := new(ResponseGetURLsByUser)
	err := c.cc.Invoke(ctx, Shortener_GetURLsByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	PingDB(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetURL(context.Context, *Short) (*GetResponse, error)
	PostURL(context.Context, *Long) (*Short, error)
	GetInternalStats(context.Context, *emptypb.Empty) (*StatsResponse, error)
	PostBatchURLs(context.Context, *RequestBatchURLs) (*ResponseBatchURLs, error)
	DeleteBatchByUser(context.Context, *RequestDeleteBatch) (*emptypb.Empty, error)
	GetURLsByUser(context.Context, *emptypb.Empty) (*ResponseGetURLsByUser, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) PingDB(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PingDB not implemented")
}
func (UnimplementedShortenerServer) GetURL(context.Context, *Short) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedShortenerServer) PostURL(context.Context, *Long) (*Short, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostURL not implemented")
}
func (UnimplementedShortenerServer) GetInternalStats(context.Context, *emptypb.Empty) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternalStats not implemented")
}
func (UnimplementedShortenerServer) PostBatchURLs(context.Context, *RequestBatchURLs) (*ResponseBatchURLs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBatchURLs not implemented")
}
func (UnimplementedShortenerServer) DeleteBatchByUser(context.Context, *RequestDeleteBatch) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchByUser not implemented")
}
func (UnimplementedShortenerServer) GetURLsByUser(context.Context, *emptypb.Empty) (*ResponseGetURLsByUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLsByUser not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_PingDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PingDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_PingDB_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PingDB(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Short)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetURL(ctx, req.(*Short))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Long)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_PostURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostURL(ctx, req.(*Long))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetInternalStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetInternalStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetInternalStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetInternalStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_PostBatchURLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestBatchURLs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).PostBatchURLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_PostBatchURLs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).PostBatchURLs(ctx, req.(*RequestBatchURLs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteBatchByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDeleteBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteBatchByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_DeleteBatchByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteBatchByUser(ctx, req.(*RequestDeleteBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetURLsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetURLsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shortener_GetURLsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetURLsByUser(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yapshrtnr.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PingDB",
			Handler:    _Shortener_PingDB_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _Shortener_GetURL_Handler,
		},
		{
			MethodName: "PostURL",
			Handler:    _Shortener_PostURL_Handler,
		},
		{
			MethodName: "GetInternalStats",
			Handler:    _Shortener_GetInternalStats_Handler,
		},
		{
			MethodName: "PostBatchURLs",
			Handler:    _Shortener_PostBatchURLs_Handler,
		},
		{
			MethodName: "DeleteBatchByUser",
			Handler:    _Shortener_DeleteBatchByUser_Handler,
		},
		{
			MethodName: "GetURLsByUser",
			Handler:    _Shortener_GetURLsByUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/yapshrtnr.proto",
}
